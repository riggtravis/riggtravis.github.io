<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Travis Rigg&#39;s Blogging and Development Extravaganza</title>
  <subtitle>A 5 ring circus featuring discussions about writing code for programs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="riggt.github.io/"/>
  <updated>2016-10-20T23:42:48.809Z</updated>
  <id>riggt.github.io/</id>
  
  <author>
    <name>Travis Rigg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript Strings?</title>
    <link href="riggt.github.io/2016/10/20/JavaScript-Strings/"/>
    <id>riggt.github.io/2016/10/20/JavaScript-Strings/</id>
    <published>2016-10-20T23:36:13.000Z</published>
    <updated>2016-10-20T23:42:48.809Z</updated>
    
    <content type="html"><![CDATA[<p>Short post today. More of the same preceding this post.</p>
<h1 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h1><p>I finally noticed something that I was doing differently between my various<br>fetch template function calls. I’ve got different single and double quote<br>usage. I don’t know if this has been my problem, but I am going to spend some<br>time learning about JavaScript. While I feel like I understand very well the<br>way JavaScript handles data structures and functions, there are still aspects<br>of the language that surprise me.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Short post today. More of the same preceding this post.&lt;/p&gt;
&lt;h1 id=&quot;Strings&quot;&gt;&lt;a href=&quot;#Strings&quot; class=&quot;headerlink&quot; title=&quot;Strings&quot;&gt;&lt;/a&gt;St
    
    </summary>
    
    
      <category term="JavaScript" scheme="riggt.github.io/tags/JavaScript/"/>
    
      <category term="Debugging" scheme="riggt.github.io/tags/Debugging/"/>
    
      <category term="Strings" scheme="riggt.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Template Loading, Why?</title>
    <link href="riggt.github.io/2016/10/14/Template-Loading-Why/"/>
    <id>riggt.github.io/2016/10/14/Template-Loading-Why/</id>
    <published>2016-10-14T23:08:23.000Z</published>
    <updated>2016-10-14T23:23:08.344Z</updated>
    
    <content type="html"><![CDATA[<p>I have reached an extremely difficult sticking point this week, one that I am<br>currently seeking help with.</p>
<h1 id="What-it-is"><a href="#What-it-is" class="headerlink" title="What it is"></a>What it is</h1><p>When I try to open mustache files on my server, sometimes I don’t get the files<br>opened that I want. I know that the failure is with the template fetching<br>function because the logic inside the success attribute of the AJAX object that<br>handles such fetching isn’t running.</p>
<p>All of my other logic works, so I am absolutely sure that the problem is with<br>my template fetching function. But wait! There’s more…</p>
<h1 id="The-template-fetching-function-works"><a href="#The-template-fetching-function-works" class="headerlink" title="The template fetching function works"></a>The template fetching function works</h1><p>What? How can that be. If the problem is with the template fetching function,<br>how can it possibly be working? Well you see, any time it is required to fetch<br>a template that <em>isn’t</em> the nav_bar template, it works just fine. In fact, it<br>even passes the tests I wrote for it, which of course require it to fetch a<br>template, because, honestly, what would be the point of the test if it didn’t?</p>
<h1 id="Well-Travis-you’ve-probably-misspelled-the-file-name"><a href="#Well-Travis-you’ve-probably-misspelled-the-file-name" class="headerlink" title="Well, Travis, you’ve probably misspelled the file name"></a>Well, Travis, you’ve probably misspelled the file name</h1><p>Already checked on that, but thanks for the heads up. That’s not the problem.<br>It was also the last alternative that I could think of that could be the<br>problem. I’ve already looked into every other call of the function as well. I<br>can’t discern anything that I’m doing differently for this function call than<br>any other.</p>
<h1 id="Maybe-work-on-another-problem"><a href="#Maybe-work-on-another-problem" class="headerlink" title="Maybe work on another problem?"></a>Maybe work on another problem?</h1><p>Actually, this is the last bug that I’m trying to quash. I only have two tests<br>that are failing. The ones that are failing are both failing because of the<br>same nav_bar loading error. It’s really annoying. I’m now <em>very</em> far behind<br>the schedule that I had set for myself. I’m definitely going to need to<br>reassess my goals at the end of this trauma, because this has eaten a <em>ton</em> of<br>my time.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have reached an extremely difficult sticking point this week, one that I am&lt;br&gt;currently seeking help with.&lt;/p&gt;
&lt;h1 id=&quot;What-it-is&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="JavaScript" scheme="riggt.github.io/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="riggt.github.io/tags/AJAX/"/>
    
      <category term="Testing" scheme="riggt.github.io/tags/Testing/"/>
    
      <category term="Web Development" scheme="riggt.github.io/tags/Web-Development/"/>
    
      <category term="Failing in Silence" scheme="riggt.github.io/tags/Failing-in-Silence/"/>
    
      <category term="Staring at Walls" scheme="riggt.github.io/tags/Staring-at-Walls/"/>
    
      <category term="Mustache" scheme="riggt.github.io/tags/Mustache/"/>
    
      <category term="File Names" scheme="riggt.github.io/tags/File-Names/"/>
    
      <category term="File Systems" scheme="riggt.github.io/tags/File-Systems/"/>
    
      <category term="Files" scheme="riggt.github.io/tags/Files/"/>
    
  </entry>
  
  <entry>
    <title>AJAX Testing; Synchronousity</title>
    <link href="riggt.github.io/2016/10/10/AJAX-Testing-Synchronousity/"/>
    <id>riggt.github.io/2016/10/10/AJAX-Testing-Synchronousity/</id>
    <published>2016-10-10T16:46:33.000Z</published>
    <updated>2016-10-10T17:14:02.939Z</updated>
    
    <content type="html"><![CDATA[<p>Today I will address concerns I have about how I am spending my time and the<br>next hurdle I have to overcome. In that order.</p>
<h1 id="How-I-Am-Spending-My-Time"><a href="#How-I-Am-Spending-My-Time" class="headerlink" title="How I Am Spending My Time"></a>How I Am Spending My Time</h1><p>I’m at a phase in this project where I am not truly implementing anything.<br>Everything I am doing for the moment is bugfixes. Debugging requires a lot of<br>thought about what exactly it is that is going on. For me, sitting and staring<br>at code doesn’t help me. I have to identify a problem, think about it, address<br>it in a way that I have come up with during the thinking phase, and then<br>identify a new problem.</p>
<p>This manner of work means that I have short intense bursts of productivity and<br>long periods of reflection. I have not been counting these long periods of<br>reflection in my time totals. The reason I do this is that I work on other<br>things while I reflect on my problems. For example, I might have a problem with<br>an AJAX call, stop counting my time, and then write a paper for another classs.<br>While I am writing that paper, an idea for how to fix my call will pop into my<br>head. I’ll make a note of the idea, and then finish my paper writing session.<br>Once I am free, I’ll start counting my time for Glacialus again until I am done<br>implementing and testing my fix.</p>
<p>My concern is how little time this means that I have spent on my project in the<br>last week. I only logged six and a half hours toward my project. I’m not sure<br>I’ll be able to keep up with expectations with only this amount of time worked.<br>I also don’t know how to dedicate more time to the project and have it actually<br>be useful.</p>
<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>Okay, that’s enough anxiety. Time to talk about real solutions to real<br>problems.</p>
<p>I wrote some dumb code.</p>
<p>I should elaborate. I wrote code that ran synchronously when I thought I was<br>writing code that would run asynchronously. This meant that my asynchronous<br>code ran long before the code I had written for it to depend on took effect.<br>Thankfully this problem is seemingly isolated to my test suite. Once I have<br>this problem fixed, I will be able to dedicate a considerable amount of time to<br>actually testing my project.</p>
<p>Speaking of…</p>
<h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><p>There is only one test left to write and run. That is really exciting for me.<br>Once all of my code is passing all of the tests I have created, I’ll be able to<br>open up my project in a web browser and see how well it truly works. I<br>anticipate making adjustments and fixing problems that I have not forseen, but<br>I am about to be done with a very major milestone. Once this is complete, I<br>will be able to start playing with some truly interesting concepts.</p>
<p>The next phase of the project after testing is complete is to seperate the<br>description of content and the description of the website into two different<br>files. While this does not sound very exciting in itself, it set me up to work<br>on having seperate markdown content files.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I will address concerns I have about how I am spending my time and the&lt;br&gt;next hurdle I have to overcome. In that order.&lt;/p&gt;
&lt;h1 id
    
    </summary>
    
    
      <category term="JavaScript" scheme="riggt.github.io/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="riggt.github.io/tags/AJAX/"/>
    
      <category term="Testing" scheme="riggt.github.io/tags/Testing/"/>
    
      <category term="Scheduling" scheme="riggt.github.io/tags/Scheduling/"/>
    
      <category term="HTML" scheme="riggt.github.io/tags/HTML/"/>
    
      <category term="Web Development" scheme="riggt.github.io/tags/Web-Development/"/>
    
  </entry>
  
  <entry>
    <title>A Tragedy of Timing and AJAX</title>
    <link href="riggt.github.io/2016/10/07/A-Tragedy-of-Timing-and-AJAX/"/>
    <id>riggt.github.io/2016/10/07/A-Tragedy-of-Timing-and-AJAX/</id>
    <published>2016-10-07T15:58:02.000Z</published>
    <updated>2016-10-07T16:22:22.547Z</updated>
    
    <content type="html"><![CDATA[<p>This is the end of the first of two weeks of measured work. I’m facing some<br>frustration as a result of the way my week is structured and also some bugs.</p>
<h1 id="Timing"><a href="#Timing" class="headerlink" title="Timing"></a>Timing</h1><p>The bulk of the work I do for Glacialus is done on Thursday and Friday night,<br>with me cutting into the weekend if necessary. This week some personal<br>responsibilities saw me unavailable to work on this project thursday night.<br>This means that I am coming into the Friday class time with only two hours of<br>outside work. I do not feel good about how this looks at the end of the first<br>week.</p>
<p>The thing is, I still have six hours of work blocked out for this project on<br>Friday afternoon. The time breakdown should still work out in my favor. One<br>might even ask why I am making my blog post when I could just work for a few<br>more hours outside of class and then submit my post. There’s no schedule for<br>when blog posts are due.</p>
<p>Even though there is no schedule for when blog posts are due, I am following a<br>schedule of my own creation. My course load is very intense, so I have time<br>blocked out very specifically during the entire week. This includes a<br>designated time for blogging. I am writing all of my blog posts for this class<br>during class times.</p>
<h1 id="Testing-the-first-hitch"><a href="#Testing-the-first-hitch" class="headerlink" title="Testing, the first hitch"></a>Testing, the first hitch</h1><p>Up until this point, the tasks that I have laid out for myself have taken about<br>the amount of time I had set out for them. Writing my tests took far longer<br>than I had expected. So now I’m behind the adjusted schedule that I had created<br>for my major report.</p>
<p>I don’t think this reflect well on me, especially given that it flared up at<br>the same time as the timing problem. I am no behind on time, and behind<br>schedule for the time that I have.</p>
<p>I plan to address this issue in my trello board at the end of this weekend. For<br>right now though, I would like to focus on my project rather than on the<br>management of it.</p>
<h1 id="Event-listeners"><a href="#Event-listeners" class="headerlink" title="Event listeners"></a>Event listeners</h1><p>That’s enough talking about this project from the standpoint of a manager. I<br>want to talk about this project from the standpoint of a computer programmer.</p>
<p>One of the keys to the success of this project is to create event listeners<br>dynamically. These event listeners are meant to pay attention to a click on an<br>element in the navigation bar. This is something I have done before for another<br>project, but for some reason, I’m having trouble this time. I think there needs<br>to be some sort of update to the Document Object Model for this to be possible<br>because right now, what is happening is that the document doesn’t contain an<br>element by the name of the element that I created one line previous.</p>
<p>So that’s what’s next for me. Learning about how to add event listeners to my<br>document after I’ve just created elements.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the end of the first of two weeks of measured work. I’m facing some&lt;br&gt;frustration as a result of the way my week is structured a
    
    </summary>
    
    
      <category term="JavaScript" scheme="riggt.github.io/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="riggt.github.io/tags/AJAX/"/>
    
      <category term="Unit Testing" scheme="riggt.github.io/tags/Unit-Testing/"/>
    
      <category term="Measured Work" scheme="riggt.github.io/tags/Measured-Work/"/>
    
      <category term="Time Management" scheme="riggt.github.io/tags/Time-Management/"/>
    
  </entry>
  
  <entry>
    <title>Measured Work: Unit Tests</title>
    <link href="riggt.github.io/2016/10/05/Measured-Work-Unit-Tests/"/>
    <id>riggt.github.io/2016/10/05/Measured-Work-Unit-Tests/</id>
    <published>2016-10-05T15:52:36.000Z</published>
    <updated>2016-10-05T16:02:44.357Z</updated>
    
    <content type="html"><![CDATA[<p>We are currently experiencing a period of steady work, intended to advance our<br>projects further. I am currently very near to a milestone point in my project.</p>
<h1 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h1><p>I am very close to finishing up with the writing of unit tests. I am using<br>QUnit to write my tests. It’s a very nice testing framework that utilizes<br>callbacks for running tests. I am very happy with how the tests are written.</p>
<p>I am looking forward to running my tests so that I can quickly fix any problems<br>that exist in my code base and move forward. I am hoping that by the end of<br>this week that I will be able to write documentation. If I’m really clever,<br>I’ll post my documentation as a blog post.</p>
<p>I really don’t have much more to say for today. That’s just kind of where I am<br>right now. Nothing new or exciting is going up, but the important things<br>central to the project are happening, even though they’re kind of dry.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are currently experiencing a period of steady work, intended to advance our&lt;br&gt;projects further. I am currently very near to a milesto
    
    </summary>
    
    
      <category term="Testing" scheme="riggt.github.io/tags/Testing/"/>
    
      <category term="Web Development" scheme="riggt.github.io/tags/Web-Development/"/>
    
      <category term="Javascript" scheme="riggt.github.io/tags/Javascript/"/>
    
      <category term="Unit Testing" scheme="riggt.github.io/tags/Unit-Testing/"/>
    
      <category term="Measured Work" scheme="riggt.github.io/tags/Measured-Work/"/>
    
      <category term="QUnit" scheme="riggt.github.io/tags/QUnit/"/>
    
  </entry>
  
  <entry>
    <title>Spike Report</title>
    <link href="riggt.github.io/2016/09/20/Spike-Report/"/>
    <id>riggt.github.io/2016/09/20/Spike-Report/</id>
    <published>2016-09-21T00:13:56.000Z</published>
    <updated>2016-09-21T01:44:38.724Z</updated>
    
    <content type="html"><![CDATA[<p>This past has been a rush to get all the things I had wanted to create into a<br>reality of some shape. I hope to describe what’s done and what there is to do.</p>
<h1 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h1><p>This is the first file that the browser receives from the server. Its job is to<br>deliver to the browser all the JavaScript that I am writing to make the really<br>cool dynamic work I’m doing appear. If I excluded the JavaScript I’m writing,<br>my index.html file would appear as totally blank in a web browser.</p>
<p>But surely it contains something, you must be thinking. Actually, yes. It is<br>full of elements whose inner HTML gets set by the JavaScript.</p>
<h1 id="glacialus-js"><a href="#glacialus-js" class="headerlink" title="glacialus.js"></a>glacialus.js</h1><p>Okay, that’s enough talking about what the JavaScript does to another file.<br>Let’s talk about the JavaScript itself, because that’s pretty cool.</p>
<p>The first thing I do is create an event listener. Event listeners are chunks of<br>script that get laid onto elements in the Document Object Model. Whenever an<br>action happens to a Docment Object that has a listener, the listener will<br>perform an action. This replaces the older functionality such as adding an<br>“onclick()” attribute to an HTML element.</p>
<p>The main advantage of an event listener instead of an “onclick()” attribute is<br>that you can put them all together in one readable place. You can also do some<br>really dynamic things such as adding event listeners inside of a for loop. This<br>will become important later when I create a navagation bar (more on that later).</p>
<p>The particular event listener I have created basically loads a site’s global<br>information. This is information about the site itself, and information about<br>the organization or individual who set up the site. The title of the site, the<br>slogan that the organization uses, their logo, any contact information that a<br>visitor would need to know, the favicon that goes in the tab the page is in,<br>these are examples of global data.</p>
<p>This initial set of actions also loads the home page. Every website needs a page<br>named “Home.” If a home page is not found, the website will not render. Because<br>there are many times when a search for a page will be performed, I have created<br>a page search function. If a page is found in list, some form of action will be<br>taken. I say some form of action because that is passed to the function as a<br>callback function.</p>
<p>While I’m describing functions I’ve created, I also have an insert html<br>function. It receives a template, in the form of a mustache file (more on that<br>later), an object, and the name of an element to receive the data. This is an<br>action that happens any time a link is clicked, and is performed multiple times<br>during the site initiation phase. Basic DRY programming, really.</p>
<p>Another action I found myself performing enough to warrant creating a function<br>for it was adding text to the end of an already populated element. Basically<br>all this function does is pull text from an element, store it in a temporary<br>location, add a string that was passed as an argument, and then put the result<br>into the original element. I could see this being useful later if I decide to<br>introduce blog functionality to my project.</p>
<p>The heart of my project is a function named “load_page” This is a function that<br>will be called anytime a new page is requested, which will be the most frequent<br>action in my project. Right now all this function does is load some sort of page<br>tite and content to go in the body of the document. In the future I would like<br>to use this function to also populate a navigation bar and introduce event<br>listeners to those links.</p>
<h1 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a>Mustache</h1><p>Earlier I mentioned that I was using Mustache templates. Mustache is a<br>templating engine. It’s basically an easy markup to use to create more<br>interesting, interactive web pages. Right now I only have a contact template and<br>a social media links template. Nothing too exciting. Actually, nothing about<br>Mustache is very exciting to talk about. That’s what’s so exciting about it.<br>Using it requires minimal headachage.</p>
<p>The next template I create will likely be a template for a navbar of some sort.</p>
<h1 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h1><p>I’m sure you’ve figured this out by now, but I’m probably going to be doing the<br>navigation bar next. I consider the navigation bar’s functionality to be just as<br>critical as the load page function. The reason for this is that the navigation<br>bar basically acts as a set of listeners whose only job it is to run the load<br>page function.</p>
<p>Interestingly, I also think that the most likely way to load the navigation bar<br>is to use the load page function. When a page is loaded, it in some way needs to<br>be acknowledged as the current page, so loading the navigation bar with the<br>current page so that the bar reflects the page makes the most sense to me.</p>
<p>I’m not excactly sure how to end this blog post. Sooooooooooooooooooooooooo…<br>BYE!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This past has been a rush to get all the things I had wanted to create into a&lt;br&gt;reality of some shape. I hope to describe what’s done an
    
    </summary>
    
    
      <category term="HTML" scheme="riggt.github.io/tags/HTML/"/>
    
      <category term="Web Development" scheme="riggt.github.io/tags/Web-Development/"/>
    
      <category term="Javascript" scheme="riggt.github.io/tags/Javascript/"/>
    
      <category term="Development" scheme="riggt.github.io/tags/Development/"/>
    
      <category term="Mustache" scheme="riggt.github.io/tags/Mustache/"/>
    
      <category term="Report" scheme="riggt.github.io/tags/Report/"/>
    
      <category term="Initial Development" scheme="riggt.github.io/tags/Initial-Development/"/>
    
  </entry>
  
  <entry>
    <title>Regarding Scanners and my Latest Two Posts</title>
    <link href="riggt.github.io/2016/09/15/Regarding-Scanners-and-my-Latest-Two-Posts/"/>
    <id>riggt.github.io/2016/09/15/Regarding-Scanners-and-my-Latest-Two-Posts/</id>
    <published>2016-09-16T03:14:06.000Z</published>
    <updated>2016-09-16T03:24:43.136Z</updated>
    
    <content type="html"><![CDATA[<p>My last post was very brief. The post before that was unfinished. Here’s what’s going on.</p>
<h1 id="What’s-going-on"><a href="#What’s-going-on" class="headerlink" title="What’s going on"></a>What’s going on</h1><p>I have an easier time representing information in the form of physical objects that I can move around. In order to best leverage this, I had created a representation of my model using index cards. I had also created a flow chart using staples, index cards, and paper.</p>
<p>Alas, scanners would ultimately be an insurmountable problem for the time frame of the assignments that were due September 16th, 2016.</p>
<p>I know a lot of people would just recreate their information as digital formats, but the way I have thought of my information would take more time to represent using traditional diagramming techniques. Creating a program for diagramming the way I think would probably be an interesting project in itself.</p>
<p>The reason it is so difficult to recreate my models in traditional drawings is that I had created all of my pieces in a modular fashion. Parts of what I had wanted to present could me removed and replaced and rearranged because that was more accurate to how my software will work.</p>
<p>The problem now is that one of my models won’t scan entirely, and the other one has been completely destroyed. That’s really all I have to say about this. It’s an all around frustrating situation, and I’ve lost an entire week and have very little to show for it. Now I’ll have to work longer over the course of the next few weeks to make up for the time that was lost this week.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>I’m not happy.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My last post was very brief. The post before that was unfinished. Here’s what’s going on.&lt;/p&gt;
&lt;h1 id=&quot;What’s-going-on&quot;&gt;&lt;a href=&quot;#What’s-g
    
    </summary>
    
    
      <category term="setbacks" scheme="riggt.github.io/tags/setbacks/"/>
    
      <category term="frustration" scheme="riggt.github.io/tags/frustration/"/>
    
      <category term="scanners" scheme="riggt.github.io/tags/scanners/"/>
    
      <category term="destruction" scheme="riggt.github.io/tags/destruction/"/>
    
      <category term="lost time" scheme="riggt.github.io/tags/lost-time/"/>
    
  </entry>
  
  <entry>
    <title>Representing Ideas: Post Two</title>
    <link href="riggt.github.io/2016/09/15/Representing-Ideas-Post-Two/"/>
    <id>riggt.github.io/2016/09/15/Representing-Ideas-Post-Two/</id>
    <published>2016-09-16T03:08:44.000Z</published>
    <updated>2016-09-16T03:13:46.184Z</updated>
    
    <content type="html"><![CDATA[<p>Due to issues with scanners on campus, I am not able to present the way data<br>flows through my program. I feel that attempting to describe in mere words is something that I have already done at length. All in all this has been an extremely frustrating situation.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Due to issues with scanners on campus, I am not able to present the way data&lt;br&gt;flows through my program. I feel that attempting to descr
    
    </summary>
    
    
      <category term="Design" scheme="riggt.github.io/tags/Design/"/>
    
      <category term="Presentation" scheme="riggt.github.io/tags/Presentation/"/>
    
  </entry>
  
  <entry>
    <title>Representing Information</title>
    <link href="riggt.github.io/2016/09/14/Representing-Information/"/>
    <id>riggt.github.io/2016/09/14/Representing-Information/</id>
    <published>2016-09-14T16:37:54.000Z</published>
    <updated>2016-09-16T03:08:15.268Z</updated>
    
    <content type="html"><![CDATA[<p>Most projects deal with information. All web applications do. Mine is one of those.</p>
<h1 id="My-Model"><a href="#My-Model" class="headerlink" title="My Model"></a>My Model</h1><p>One of the problems I have to tackle with my project is that depending on a website maintainer’s needs, different information will be represented on the website. I needed to figure out what information would always be required, what information would only appear sometimes, and how that information should all look in order for the framework to understand how it should be formatted.</p>
<p>This means that there isn’t a single schema or entity relational model that describes my project. Instead, there are various valid object compositions with smaller add ons that can be included or excluded depending on the needs of the user. These add ons need to be formatted correctly in order for the website to be constructed.</p>
<p>In order to represent this dynamic set of data, I created a stack of index cards and got out a piece of paper. Hopefully as we start diving into my model, this way of representing information in a modular way will help to better explain what information is sometimes present and what information should always be present.</p>
<h2 id="What-data-is-needed"><a href="#What-data-is-needed" class="headerlink" title="What data is needed?"></a>What data is needed?</h2><p>To answer that question, I have a piece of paper with two index cards stapled to it.</p>
<p><img src="http://i.imgur.com/OB1rVvJ.png" alt="base model" title="This is the base model. This information is absolutely required for the website to display"></p>
<p>Every website must absolutely have a title. This is the name of the website. For example, if you were to visit <a href="https://www.google.com/" target="_blank" rel="external">https://www.google.com/</a> you would probably call the website as a whole, the one that includes “google.com” in the domain name no matter what page you’re on, as <a href="https://www.google.com/" target="_blank" rel="external">“Google”</a></p>
<p>Every website has one or many pages. In order to anticipate many pages, I am keeping pages in a list format. A website’s maintainer might only put one page in that list of pages, but it still needs to be in a list format.</p>
<p>Every page is pretty simple. It has a title and it has content. Its title is its identifier that lets visitors of the website know what they are looking at. Content is the stuff that a visitor would want to look at. For example a page might be titled “Photos” and the content would be actual photos that the users want to look at.</p>
<p>Every website also needs to have a page titled “Home”. This is so my JavaScript code can know which content should be loaded when a visitor first arrives at a website.</p>
<h2 id="How-are-the-different-kinds-of-data-related-to-eachother"><a href="#How-are-the-different-kinds-of-data-related-to-eachother" class="headerlink" title="How are the different kinds of data related to eachother?"></a>How are the different kinds of data related to eachother?</h2><p>For this I created a stack of index cards. Let me begin by explaining a slightly basic concept and then a more complicated concept.</p>
<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>This is the more basic concept. I need to explain it first because the more complicated concept is based on this one.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Most projects deal with information. All web applications do. Mine is one of those.&lt;/p&gt;
&lt;h1 id=&quot;My-Model&quot;&gt;&lt;a href=&quot;#My-Model&quot; class=&quot;head
    
    </summary>
    
    
      <category term="design" scheme="riggt.github.io/tags/design/"/>
    
      <category term="models" scheme="riggt.github.io/tags/models/"/>
    
      <category term="polymorphism" scheme="riggt.github.io/tags/polymorphism/"/>
    
  </entry>
  
  <entry>
    <title>Representing Ideas: Post One</title>
    <link href="riggt.github.io/2016/09/14/Representing-Ideas-Post-One/"/>
    <id>riggt.github.io/2016/09/14/Representing-Ideas-Post-One/</id>
    <published>2016-09-14T16:07:22.000Z</published>
    <updated>2016-09-14T16:16:56.992Z</updated>
    
    <content type="html"><![CDATA[<p>Last week we presented our project ideas as well as time frames for how long each milestone should take.</p>
<p>Mine can be found <a href="https://docs.google.com/presentation/d/1MJsbFR9jXyyolO_t0ncXi5k6k0-4hgj8jirFA6PSxG4/present#slide=id.p" target="_blank" rel="external">here</a>.</p>
<h1 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h1><p>I think I was effective in giving information while not overloading my groupmates with specifics in my talking points. I gave explanations for what a milestone actually was rather than what components were necessary to complete it. I most need to be familiar with the specifics. They need to understand the generalities of my project before they can begin to care about my specifics.</p>
<p>I wish I had done better creating visuals that actually explained what I was doing, but that’s not really how I think through problems. It’s really hard for me to present visuals to explain what I’m thinking to others when how I work through what I’m thinking is with a pen and a piece of paper. Most people would think I was drawing diagrams based on what I just said, but really I’m writing down what problems I’m having with my system or someone else’s existing systems, and then writing down possible solutions.</p>
<p>I really only start drawing things when I’m worrying about user experience problems, which I will be doing very soon as we start to implement our projects. My first milestone is to create a working website by interpretting a JSON file. The time I will the most be thinking about user experience will be now, so very shortly, I should have drawings for this blog.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Last week we presented our project ideas as well as time frames for how long each milestone should take.&lt;/p&gt;
&lt;p&gt;Mine can be found &lt;a href
    
    </summary>
    
    
      <category term="design" scheme="riggt.github.io/tags/design/"/>
    
      <category term="representations" scheme="riggt.github.io/tags/representations/"/>
    
      <category term="presentations" scheme="riggt.github.io/tags/presentations/"/>
    
  </entry>
  
  <entry>
    <title>Agile Development and You</title>
    <link href="riggt.github.io/2016/09/13/Agile-Development-and-You/"/>
    <id>riggt.github.io/2016/09/13/Agile-Development-and-You/</id>
    <published>2016-09-14T00:40:04.000Z</published>
    <updated>2016-09-14T01:45:08.672Z</updated>
    
    <content type="html"><![CDATA[<p>We watched <a href="https://youtu.be/VjKYO6DP3fo" target="_blank" rel="external">this video</a> about agile development and design. I have thoughts.</p>
<h1 id="Concerns"><a href="#Concerns" class="headerlink" title="Concerns"></a>Concerns</h1><p>One of the key points of the video is that whatever component of your project is resistent to change, you should figure out how to make it more fluid. The issue I was facing was that any change in my design will require changes in my JSON files. I was concerned that this was too much work for any design changes to my program.</p>
<p>As I thought about how I would fix this problem, it occurred to me that I could use my old JSON examples of proper objects as examples of failure states. Right now I have only thought of two conditions that should force a website made by my framework to fail. If my design changes, my old success cases should hypothetically fail.</p>
<p>Thankfully a communication with my professor calmed me down. He explained to me that a design is a design. It by its nature will be resistent to change, but when it does, it’s everything else that should respond fluidly. In thinking about it, I also came to the conclusion that editing my JSON files will be just as easy as editing injection scripts for a traditional database or setting up an object in a test suite.</p>
<h1 id="Change-and-Me"><a href="#Change-and-Me" class="headerlink" title="Change and Me"></a>Change and Me</h1><p>With past projects, making changes to the design felt impossible at best. Hopefully my experience working on Pyramid and Atom will have taught me some lessons.</p>
<p>Pyramid in particular was interesting. They thought of the documentation as a seperate project from Pyramid itself. The documentation was just as subject to change as the codebase. There wasn’t a changelog outside if what would have been documented by the issues, pull requests, and merges. If there was a release of Pyramid, there would be a review session to make sure the documentation was stable, and then Pyramid and the documentation would have a release the same day.</p>
<p>This was much more structured than what happened with Atom. Atom had documentation that would get edited if someone in the wild found something that didn’t match reality. This was much more annoying because mismatches between the two felt like oversights whereas mistakes in Pyramid’s documentation felt like honest mistakes.</p>
<p>I think for my project I prefer the Pyramid style. I think I’ll create a tast for every milestone to create and review documentation. That isn’t time I had budgeted for, so I’ll really have to think about how long this process should take. 4 hours for each milestone might be reasonable.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We watched &lt;a href=&quot;https://youtu.be/VjKYO6DP3fo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this video&lt;/a&gt; about agile development and design. I hav
    
    </summary>
    
    
      <category term="Planning" scheme="riggt.github.io/tags/Planning/"/>
    
      <category term="Agile" scheme="riggt.github.io/tags/Agile/"/>
    
      <category term="SCRUM" scheme="riggt.github.io/tags/SCRUM/"/>
    
      <category term="Design" scheme="riggt.github.io/tags/Design/"/>
    
      <category term="Data Design" scheme="riggt.github.io/tags/Data-Design/"/>
    
  </entry>
  
  <entry>
    <title>Static Website Generation Framework</title>
    <link href="riggt.github.io/2016/08/30/Static-Website-Generation-Framework/"/>
    <id>riggt.github.io/2016/08/30/Static-Website-Generation-Framework/</id>
    <published>2016-08-31T02:11:29.000Z</published>
    <updated>2016-08-31T15:05:51.066Z</updated>
    
    <content type="html"><![CDATA[<p>I have chosen to build a static website generation framework. Users give the framework simple inputs and a website is born.</p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p>Any project requires the usage of tools. You don’t build cabinents with your bare hands. You use a hammer.</p>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>In order to grab files with content from the server, AJAX will be needed. jQuery as a library provides this with the least amount of headache.</p>
<h2 id="Mustache-js"><a href="#Mustache-js" class="headerlink" title="Mustache.js"></a>Mustache.js</h2><p>Static website generators use templating engines to describe their page layouts. <a href="https://hexo.io/docs/templates.html" target="_blank" rel="external">Hexo</a> uses some form of ERB inspired template. <a href="https://jekyllrb.com/docs/templates/" target="_blank" rel="external">Jekyll</a> uses the liquid templating engine. I would like to use Mustache because it is simple, readable, flexible, light weight, and portable. jQuery comes with a templating system that I could use without adding anymore weight to my project, but it is awful and I don’t want to deal with it.</p>
<h2 id="Markdown-js"><a href="#Markdown-js" class="headerlink" title="Markdown.js"></a>Markdown.js</h2><p><a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="external">Hexo</a> uses its own markdown rederer. <a href="https://jekyllrb.com/docs/posts/" target="_blank" rel="external">Jekyll</a> also uses markdown. While this isn’t the only option, as a static web page generator could potentially use any lightweight markup language(LML), it is the best option for a couple of reasons. Markdown has deep penetration thanks to GitHub and Reddit. It’s also extremely simple and human readable, which is why those two organizations picked it in the first place.</p>
<p>Other lightweight markdown languages I could use that aren’t Markdown include <a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="external">reStructuredText</a> which is the prefered LML of the Python community. I feel however that this markup language is a little too complicated and doesn’t have enough penetration that many people would be familiar with it. A static web generation framework should require as little new learning on the part of the user as possible.</p>
<h1 id="Time-Estimate"><a href="#Time-Estimate" class="headerlink" title="Time Estimate"></a>Time Estimate</h1><ol>
<li>2 Weeks: build initial website</li>
<li>1 Week:  site information file</li>
<li>1 Week:  markdown content</li>
<li>4 Weeks: dynamic file scanning</li>
<li>4 Weeks: search engine visibility</li>
</ol>
<h1 id="Intermediate-Goals"><a href="#Intermediate-Goals" class="headerlink" title="Intermediate Goals"></a>Intermediate Goals</h1><ol>
<li>Working website</li>
<li>Markdown based website</li>
<li>Purely dynamic website</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have chosen to build a static website generation framework. Users give the framework simple inputs and a website is born.&lt;/p&gt;
&lt;h1 id=&quot;T
    
    </summary>
    
    
      <category term="Planning" scheme="riggt.github.io/tags/Planning/"/>
    
      <category term="JavaScript" scheme="riggt.github.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="riggt.github.io/tags/HTML/"/>
    
      <category term="Web Development" scheme="riggt.github.io/tags/Web-Development/"/>
    
      <category term="Framework" scheme="riggt.github.io/tags/Framework/"/>
    
      <category term="Development" scheme="riggt.github.io/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>Three Project Ideas</title>
    <link href="riggt.github.io/2016/08/27/Three-Project-Ideas/"/>
    <id>riggt.github.io/2016/08/27/Three-Project-Ideas/</id>
    <published>2016-08-28T02:03:24.000Z</published>
    <updated>2016-08-29T17:06:29.733Z</updated>
    
    <content type="html"><![CDATA[<p>This is my first post on this blog, so I think I’d like to introduce it just a little bit before I get things going. This is my development blog. I post about things I am working on. Right now, I’m working on my senior capstone at Berea College. These are a few ideas that I’ve been thinking about to work on.</p>
<h1 id="Twitter-Bot-Detector"><a href="#Twitter-Bot-Detector" class="headerlink" title="Twitter Bot Detector"></a>Twitter Bot Detector</h1><p>Someone in our class pitched the idea of a Twitter Bot as a project. I, being a contrarian, immediately thought to myself that I should build a Twitter Bot Detector.</p>
<p>After looking into the viability of this project, I found that the University of Texas had already done this, so I looked at their work. There are several parts of detecting a twitter bot, all related to different aspects of a bot’s behavior.</p>
<p>The first thing to look at is how much content is the bot creating, and how much is it regurgitating via retweets. An actual human person will on occasion have something to say about something. It might be how their day was, it might be what they had for breakfast, it might be an excited tweet about the future times. Whatever it is, a human person will do this along side retweeting things that they found nifty.</p>
<p>The next tell tale sign of a twitter bot is the times of activity. Actual human people have things they have to do through out their day. They need sleep, they need food, they have to interact with physical people in the physical world, they need to rotate their fluids. Twitter bots don’t have to do any of these things. When looking at a human person’s twitter feed, it will have sporadic activity; it will have periods of rapid tweeting and retweeting followed by large blocks of doing other things. Twitter bots deviate from this behavior. They can have rather constant streams of activity.</p>
<p>Of course, modern twitter bots are sophisticated enough to pass both of these tests. The next analyses are a little more sophisticated. They require information and language processing that might be a little complex for a single semester of work. I’m still going to describe them because I might decide that they are actually simple enough, or someone else in our class might say to themselves, “Hey. Travis might not be very good at these things, but I’ve done them before, I feel really comfortable with them.”</p>
<p>The next thing that Twitter Bots don’t have in common with human people is sensible social networks. Human people have friends who know their other friends You can reasonably expect a human user of twitter to have several followers who not only follow the account in question, but also follow the several other accounts that follow them as well as the account in question. This however does need to take into consideration extremely popular twitter accounts as well as verified accounts (which are generally popular).</p>
<p>Even so, twitter bot builders have gotten sophisticated enough to subvert this test method as well. They’ll set up several bot accounts that all follow each other creating a social network of bots. I’m sure there are still ways to detect this form of activity, but what I’m not sure about is how to do this. I would probably put more thought into the next detection method before coming back around to this.</p>
<p>Human people usually use language in a certain way. One example would be that human people don’t say “human people.” I’ve been doing that through this portion of the blog post to get ready for this part of it. A bot detector needs to do some language processing to see how human a questionable account seems to be in its tweets. Ideally this mechanism would be quite robust, but a language processor could make an entire project in itself. For the purposes of this course, the bot detector’s ability to process language should be very basic.</p>
<p>Each on their own, these methods can create quite a few false positives, or miss advanced bots that successfully circumvent their methods. One needs to gather results from each method and process them in order to come to an actual conclusion. The first method I thought of to compile this data was a neural network, but there are probably other ways as well.</p>
<p>Conveniently, these are five different parts of creating a twitter bot detector, and they are all rather modular. I think the completion of each component in order make for excellent milestones for our senior projects course. I don’t think spacing the components evenly is a wise plan though. The content vs regurgitation component should take less time than the others, though it is also the first component and needs to take learning how twitter handles data into consideration. Content vs regurgitation should take two weeks.</p>
<p>The activity monitor is also pretty simple, and should take about the same amount of time as the content vs regurgitation component. However, the programmer will already be familiar with how Twitter handles data by this time. I think this should only take a week.</p>
<p>This leaves 12 weeks to handle the big problems. I would allocate four weeks to social network analysis, three to handle language processing, and two to set up a neural network. I’ve given language processing a little less time because I don’t think I can possibly come up with something adequate even given the whole semester. I do however I think I can come up with something super basic if given three weeks given some of the excellent resources available to us here at Berea College in the form of our professors. Two weeks might seem like a long time to set up a neural network, but in my experience, the tools for this are buggy and poorly documented.</p>
<p>This leaves three weeks for testing and fixing. That is less time than I would like for a project of this complexity, especially given that attempts at budgeting time for it might be way off scale for how much any component that turns out to be more complex than initially believed. That being said, after writing out the necessary steps, this project seems much more realistic than it had when it was bouncing around in my head.</p>
<p>This project also gives me an opportunity to grow because it is so different from the things that I have been working on. The problem for me is that I don’t think it gives me any utility growth, that being growth I can use. It would be a fun project centered around things I don’t know much about, but I don’t see a future path that would be strengthened by this project.</p>
<p>I still feel like all of this was more than I could handle over a single semester. I think I would be more interested in it if no one had done anything in the field, or enough people had done work on the problem that I could make a small tweak on a proven concept to make something interesting.</p>
<p>Taking a proven concept and putting a small tweak on it to create something interesting brings me into my next topic…</p>
<h1 id="Email-Client"><a href="#Email-Client" class="headerlink" title="Email Client"></a>Email Client</h1><p>Using Node and Electron, JavaScript can be used for nearly anything. I would like to play with creating an email client using electron.</p>
<p>Sending email using HTML formatted text can be really annoying when there’s a WYSIWYG editing pane that refuses to rest control when the user asks for it (looking at you, Evolution). I would like to create one that has an editing pane on the left that displays in plain text, and a preview window on the right that displays what the email will look like to its recipient.</p>
<p>This email client would not be comprehensive. It would only support the most widely used protocols such as IMAP. Protocols like Exchange would be too big to worry about in a single semester. I would rather focus on creating a well polished, easy to use, basic email client than a feature complete email client that doesn’t look nice. There’s Mutt for that.</p>
<p>I think it’s worth considering when thinking about both the user interface and milestones for the project what the views in an email client are. Usually you have a pane for your folders, a pane that displays your emails in a list format, a pane that displays the content of a single email, a pane for composing your email, and a set up pane. That is five panes total.</p>
<p>While it might seem like the best plan is to divide the term into milestones for each of these components, I think a better plan would be to cycle through these components rapidly, and improve them on each cycle. What I mean by this is that instead of blocking out 3 weeks straight to work on the composition pane, I would maybe spend each of my sessions in those three weeks working on a single view, creating an iteration of the whole every three weeks.</p>
<p>The work schedule I have set up for myself includes five hours on Thursday and five hours on Friday each week to work on my project. I would do something like Spending the Thursday of the start of each three week cycle designing how I want things to work, and then the Friday working on one component. The next week I would spend Thursday one of the remaining four components, and Friday working on one of the remaining three. In the third and final week of each cycle I would work on the two components I hadn’t worked on yet.</p>
<p>This gives a sort of release cycle milestone set up that I think would work a lot like working on a novella or paper. First you create a rough draft, one in this case that might not even function completely properly. The first editing session you spend figuring out what you like and don’t like about your rough draft, making changes to the structure of your rough draft, and fixing major bugs with the system, producing a second draft.</p>
<p>The reason I refer to the releases as drafts is that you might come up with an interface concept that in practice isn’t as good as you thought it was, so then you would have to spend quite a bit of time making major changes to the way things were. The other reason is that much like in writing a paper, there are going to be errors in the code of the program. This is especially true because Electron is a technology that I am not familiar with working on from scratch. Any programming that I have done in the environment has been working with a preexisting project.</p>
<p>It’s sort of strange to think that one of the ideas I’m considering is centered around a user interface idea that I have. User interfaces always presented me problems when they were introduced in whatever programming language tutorial I was working through. I am hopeful that my experience using MinCSS to style pages will provide some help, given that Electron apps are essentially web pages.</p>
<p>Just as interesting twists on ideas drew me directly into this idea, web pages draws me into the next one…</p>
<h1 id="Static-Web-Page-Generator"><a href="#Static-Web-Page-Generator" class="headerlink" title="Static Web Page Generator"></a>Static Web Page Generator</h1><p>A Static Web Page Framework takes input files and uses them to build a website. I want to build one that doesn’t require compilation or installation.</p>
<p>This is the idea I have put the most thought into, which is why I have presented it last. I wanted to give the other ideas I have a chance in the sun in case someone else had interest in them. I don’t want my excited energy to dissuade anyone else from thinking about my other ideas. I think they’re both fun ideas that could be really interesting to play with, but this is the idea that I’m the most interested in doing.</p>
<p>Over the summer, a friend of mine asked for help building a website for her business. That website is still in progress, but over the course of getting it to it’s current status (bug fixes), I learned a lot about creating a web page by dynamically loading information into a view using JSON files. I still think I can do better.</p>
<p>I want to create a general purpose static web page framework along these same principles. All of the processing of data will be handled by the web browser. This makes my project significantly different from something like Hexo. With most Static Website Generators, you write files, and then run some form of compilation. HTML files are output, and those are used for the website.</p>
<p>My project will require no compilation. A single HTML file will use JavaScript to inject information into HTML elements. Before I have done this using JSON files that contain the information that is to be injected. I would like to use something more human readable like markdown. The specific tools that I would use to make this happen would be Mustache.js, jQuery, and Markdown.js.</p>
<p>Milestones would be structured around how I set up my initial project. What I am planning to do is to create a single JSON object that contains all the information necessary to create a website. Each step of building my project would entail removing a component from the object and moving it into another file structure.</p>
<p><img src="http://i.imgur.com/TRwYl69.jpg" alt="I may or may not have left the pen in the shot because I think it looks nifty"></p>
<p>The first milestone will be setting up the website to work on this base object. Functionality can be drawn out of this object into other files for future milestones. This first milestone is rather large because it includes such things as writing the HTML code that will be used to display the content and integrating Markdown.js and Mustache.js to turn the content into HTML. I expect this to take two weeks.</p>
<p>The second milestone will be a simple one. I want to draw the site information away from the basic starter object into its own file. This will include things that are the same on every single page that the user visits like the title of the website, the favicon, and the contact information of the site owner. This milestone won’t take very long because it is so simple. I expect it to take a week. This might seem like a lot of time to dedicate to this task, but I expect there to be ideas I have to make this feature even better and more human readable while I work on it.</p>
<p>The third milestone will be to draw content out of the main object and separate it into markdown files. The content of files on a server can be accessed using AJAX as long as the file name is known. This is why the filenames will still be in the main object. In fact, at this point in the project, the filenames will be the only things left in the object. I already have experience doing this, but it still takes quite a bit of code to do. I think it will take me about two weeks.</p>
<p>The fourth milestone will be the hardest one. I want to get rid of the object entirely. I would like to use a web server’s directory listing to gather the names of all of the markdown files so that the JavaScript can pull content from these files without being told explicitly what their names are. I think this should take four weeks.</p>
<p>The final milestone will be to modify the project so that when someone searches the web the content of the site can be queried by the search engine of their choice. I’m not very sure how hard this will be, so I would like to dedicate as much time to it as I did for the web server directory listing milestone. All in all, this leaves three weeks for testing and fixing, as well as room for if one of these tasks presents unforeseen problems and takes more time to work on than was originally budgeted. That’s pretty accurate to how I want my senior project to be structured, so I feel really comfortable with this idea being the one I go forward with. I might be favoring it unfairly, but I just think it fits the structure of this course better than my other ideas, and is the one I have the most familiarity with.</p>
<p>A human readable compilation free static website framework could be a really great thing for people hosting websites on servers and don’t know much about creating web pages. It would provide a path for minimal set up, though it would decrease the responsiveness and performance of the website. This is a sacrifice I am willing to make for the sake of a fun project that does something interesting.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is my first post on this blog, so I think I’d like to introduce it just a little bit before I get things going. This is my developme
    
    </summary>
    
    
      <category term="JavaScript" scheme="riggt.github.io/tags/JavaScript/"/>
    
      <category term="brainstorming" scheme="riggt.github.io/tags/brainstorming/"/>
    
      <category term="planning" scheme="riggt.github.io/tags/planning/"/>
    
  </entry>
  
</feed>
